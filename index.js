const express = require ('express');
const http = require('http');
const path = require('path');
const cors = require('cors');
const fs = require('fs');
const multer = require('multer');

const app = express (); // making an express application
const server = http.createServer(app);

const PORT = process.env.PORT || 5000;

// Added to test socket.io communication
// Delete after test complete ////////////////////
const socket = require ('socket.io');
const { SocketAddress } = require('net');
const io = socket(server);

io.sockets.on('connection', newConnection);

// Testing nedb database
const Datastore = require('nedb');
const {response} = require('express');
const database = new Datastore('database.db');
database.loadDatabase();
//////////////////////////////////////////////////

// Suppress CORS warning.
app.use(cors());

app.use(express.static(path.join(__dirname, 'public')));

app.get('/test', (req, res) => {
    // commented for nedb testing purposes
    //res.send('Success!');
    
    // testing nedb
    database.find({}, (err, data) => {
        if (err){
            res.end;
            return;
        }
        res.json(data);
    });
});

app.post('/upload-audio', (req, res) => {
    const data = request.body;
    database.insert(data);
    res.json(data);
    console.log("hello");
});


/*app.post('/upload-audio', uploadAudioDetail, (req, res) => {

    const nickname = req.body.nickname;
    const audio = req.files['audio'][0];

    // Rename the file since its name is automatically generated by multer.
    fs.renameSync(path.join(audioPath, audio.filename), path.join(audioPath, `${nickname}.mp3`));
    res.send('Success!');
    console.log(`Saved ${nickname}.mp3!`);
});*/

// Handle sockets for testing purposes
// Delete after test complete ////////////////////
function newConnection(socket) {
    console.log('new connection: ' + socket.id);
    socket.on('button-clicked', buttonClicked);
    socket.on('cat-tap-success', catTapSuccess);

    function buttonClicked() {
        const timestamp = Date.now(); // save current time
        // insert string whenever a button is clicked
        database.insert({content: "a button has been clicked", timestamp: timestamp}); // testing nedb
        socket.broadcast.emit('button-clicked', "button-clicked");
        console.log('button clicked!');
    }

    function catTapSuccess() {
        socket.broadcast.emit('cat-tap-success', "cat-tap-success");
        console.log('cat tap success!');
    }
}
//////////////////////////////////////////////////

server.listen(PORT, function(){
    console.log(`initiating server at ${ PORT }`);
})
